// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleBank.Data;

namespace SimpleBank.Migrations
{
    [DbContext(typeof(SimpleBankContext))]
    [Migration("20230419012838_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("SimpleBank.Model.DepositAccount", b =>
                {
                    b.Property<int>("DepositAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepositAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateDepositOpen")
                        .HasColumnName("DateDepositOpen")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepositTotal")
                        .HasColumnName("DepositTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DepositAccountId");

                    b.ToTable("DepositAccounts");
                });

            modelBuilder.Entity("SimpleBank.Model.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FathersName")
                        .HasColumnName("FathersName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNumber")
                        .HasColumnName("PassportNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnName("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SimpleBank.Model.SalaryAccount", b =>
                {
                    b.Property<int>("SalaryAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalaryAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSalaryOpen")
                        .HasColumnName("DateSalaryOpen")
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SalaryTotal")
                        .HasColumnName("SalaryTotal")
                        .HasColumnType("INTEGER");

                    b.HasKey("SalaryAccountId");

                    b.ToTable("SalaryAccounts");
                });

            modelBuilder.Entity("SimpleBank.Model.Person", b =>
                {
                    b.HasOne("SimpleBank.Model.DepositAccount", "DepositAccount")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleBank.Model.SalaryAccount", "SalaryAccount")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
